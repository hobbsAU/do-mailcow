#!/bin/bash
# A menu driven shell script to provision mailcow on DigitalOcean

## ----------------------------------
# Section: Define variables
# ----------------------------------
DEBUG=0
DM_BIN=/usr/bin/docker-machine
ENV_CONF='env.conf'

# ----------------------------------
#  Section: User defined functions
# ----------------------------------
read_env_conf() {
if [ -f ${ENV_CONF} ]; then
    echo "Reading user config...." >&2

    # check if the file contains something we don't want
    CONFIG_SYNTAX="(^\s*#|^\s*$|^\s*[a-z_][^[:space:]]*=[^;&\(\`]*$)"
    if egrep -q -iv "$CONFIG_SYNTAX" "$ENV_CONF"; then
      echo "Config file is unclean, please check it..." >&2
      exit 1
    fi
    # now source it, either the original or the filtered variant
    export $(cat $ENV_CONF | grep -v ^\# | xargs)
    echo $MAILCOW_TZ
    #source "$ENV_CONF"
else
    echo "There is no configuration file call ${ENV_CONF}"
    pause
fi
}

pause(){
  read -p "Press [Enter] key to continue..." fackEnterKey
}

machine_create(){
local 	DM_PARMS=""

#Must have access token and hostname	
if [[ ! ${#DIGITALOCEAN_ACCESS_TOKEN} == 64 ]]; then
  while [[ ! ${#DIGITALOCEAN_ACCESS_TOKEN} == 64 ]]; do
    read -ep "DigitalOcean API Token (must be generated via DigitalOcean control panel): " DIGITALOCEAN_ACCESS_TOKEN
  done
fi
if [ -z "$DIGITALOCEAN_HOSTNAME" ]; then
  while [ -z "$DIGITALOCEAN_HOSTNAME" ]; do
    read -ep "DigitalOcean hostname: " DIGITALOCEAN_HOSTNAME
  done
fi

#Build docker-machine parameters
if [ ! -z "$DIGITALOCEAN_ACCESS_TOKEN" ]; then
DM_PARMS+=(--digitalocean-access-token $DIGITALOCEAN_ACCESS_TOKEN)
fi

if [ ! -z "$DIGITALOCEAN_SSH_KEY_FINGERPRINT" ]; then
DM_PARMS+=(--digitalocean-ssh-key-fingerprint $DIGITALOCEAN_SSH_KEY_FINGERPRINT)
fi

if [ ! -z "$DIGITALOCEAN_IMAGE" ]; then
DM_PARMS+=(--digitalocean-image $DIGITALOCEAN_IMAGE)
fi

if [ ! -z "$DIGITALOCEAN_REGION" ]; then
DM_PARMS+=(--digitalocean-region $DIGITALOCEAN_REGION)
fi

if [ ! -z "$DIGITALOCEAN_SIZE" ]; then
DM_PARMS+=(--digitalocean-size $DIGITALOCEAN_SIZE)
fi

if [ ! -z "$DIGITALOCEAN_USERDATA" ]; then
DM_PARMS+=(--digitalocean-userdata $DIGITALOCEAN_USERDATA)
fi

if [ ! -z "$DIGITALOCEAN_SSH_KEY_PATH" ]; then
DM_PARMS+=(--digitalocean-ssh-key-path $DIGITALOCEAN_SSH_KEY_PATH)
fi

if [ ! -z "$DIGITALOCEAN_SSH_PORT" ]; then
DM_PARMS+=(--digitalocean-ssh-port $DIGITALOCEAN_SSH_PORT)
fi

if [ ! -z "$DIGITALOCEAN_MONITORING" ]; then
DM_PARMS+=(--digitalocean-monitoring=$DIGITALOCEAN_MONITORING)
fi

if [ ! -z "$DIGITALOCEAN_HOSTNAME" ]; then
DM_PARMS+=($DIGITALOCEAN_HOSTNAME)
fi

	if [ $DEBUG -eq "1" ]; then
		echo "${DM_PARMS[@]}";
		eval "printenv |grep DIGITAL";
	fi


	echo "Creating Docker Machine.."
	eval "$DM_BIN create --driver digitalocean ${DM_PARMS[@]}"
        pause
}
 
# List docker-machines
machine_list(){
	echo "Listing Docker Machines.."
        $DM_BIN ls
	pause
}
 
# List docker-machines
machine_ip(){
	if [ -z "$DIGITALOCEAN_HOSTNAME" ]; then
		while [ -z "$DIGITALOCEAN_HOSTNAME" ]; do
        		$DM_BIN ls
    			read -ep "IP for hostname: " DIGITALOCEAN_HOSTNAME
  		done
	fi
        $DM_BIN ip $DIGITALOCEAN_HOSTNAME
	pause
}


#Install Mailcow
mailcow_install(){
	 $DM_BIN ssh $DIGITALOCEAN_HOSTNAME "
		cd /opt;
		git clone https://github.com/mailcow/mailcow-dockerized; 
		cd mailcow-dockerized;
		MAILCOW_HOSTNAME=$DIGITALOCEAN_HOSTNAME MAILCOW_TZ=$MAILCOW_TZ ./generate_config.sh;"
}


mailcow_start(){
	 $DM_BIN ssh $DIGITALOCEAN_HOSTNAME "
		cd /opt/mailcow-dockerized/; pwd; ls -al; docker-compose pull; docker-compose up -d"
}


# Function to display menu
show_menu_machine() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"	
	echo " M A C H I N E - M E N U"
	echo "~~~~~~~~~~~~~~~~~~~~~~~~~"
	echo "1.  upgrade   - Upgrade a machine to the latest version of Docker"
	echo "2.  config    - Print the connection config for machine"
	echo "3.  inspect   - Inspect information about a machine"
	echo "4.  ls        - List machines"
	echo "5.  restart   - Restart a machine"
	echo "6.  rm        - Remove a machine"
	echo "7.  ssh       - Log into or run a command on a machine with SSH."
	echo "8.  start     - Start a machine"
	echo "9.  status    - Get the status of a machine"
	echo "10. stop      - Stop a machine"
	echo "11. active    - Print which machine is active"
	echo "12. version   - Show the Docker Machine version or a machine docker version"
	echo "0.  Exit"
}

read_menu_machine_options(){
	local choice
	if [ -z "$DIGITALOCEAN_HOSTNAME" ]; then
		while [ -z "$DIGITALOCEAN_HOSTNAME" ]; do
        		$DM_BIN ls
    			read -ep "Name: " DIGITALOCEAN_HOSTNAME
  		done
	fi
	echo ""
	read -p "Enter choice [ 0 - 11 ] " choice
	case $choice in
		1) $DM_BIN upgrade $DIGITALOCEAN_HOSTNAME; pause ;;
		2) $DM_BIN config $DIGITALOCEAN_HOSTNAME; pause ;;
		3) $DM_BIN inspect $DIGITALOCEAN_HOSTNAME; pause ;;
		4) $DM_BIN ls; pause ;;
		5) $DM_BIN restart $DIGITALOCEAN_HOSTNAME; pause ;;
		6) $DM_BIN rm $DIGITALOCEAN_HOSTNAME; pause ;;
		7) $DM_BIN ssh $DIGITALOCEAN_HOSTNAME; pause ;;
		8) $DM_BIN start $DIGITALOCEAN_HOSTNAME; pause ;;
		9) $DM_BIN status $DIGITALOCEAN_HOSTNAME; pause ;;
		10) $DM_BIN stop $DIGITALOCEAN_HOSTNAME; pause ;;
		11) $DM_BIN active; pause ;;
		12) $DM_BIN version; pause ;;
		0) return 1;;
		*) echo -e "${RED}Error...${STD}" && sleep 1
	esac
}

machine_subcommands () {
local loop_exit=0
while [ $loop_exit -eq 0 ]
do
        show_menu_machine
        read_menu_machine_options
	loop_exit=$?
done
}

show_help() {
echo "Usage: "
}


# Function to display main menu
show_menu_main() {
	clear
	echo "~~~~~~~~~~~~~~~~~~~~~"	
	echo " M A I N - M E N U"
	echo "~~~~~~~~~~~~~~~~~~~~~"
	echo "1. Provision DigitalOcean Mailcow"
	echo "2. Docker Machine Subcommands"
	echo "3. Droplet Public IP"
	echo "4. Install Mailcow"
	echo "5. Start Mailcow"
	echo "0. Exit"
}

# read input from the keyboard and take a action
# invoke the one() when the user select 1 from the menu option.
# invoke the two() when the user select 2 from the menu option.
# Exit when user the user select 3 form the menu option.
read_menu_main_options(){
	local choice
	read -p "Enter choice [ 0 - 5 ] " choice
	case $choice in
		1) machine_create ;;
		2) machine_subcommands ;;
		3) machine_ip ;;
		4) mailcow_install ;;
		5) mailcow_start ;;
		0) exit 0;;
		*) echo -e "${RED}Error...${STD}" && sleep 1
	esac
}


 
# ----------------------------------------------
# Section: Trap CTRL+C, CTRL+Z and quit singles
# ----------------------------------------------
trap '' SIGINT SIGQUIT SIGTSTP
 
# -----------------------------------
# Section: Main logic - infinite loop
# ------------------------------------

while getopts "hd" opt; do
    case "$opt" in
    h|\?)
        show_help
        exit 0
        ;;
    d)  DEBUG=1
        ;;
	esac
done

read_env_conf
while true
do
	show_menu_main
	read_menu_main_options
done
